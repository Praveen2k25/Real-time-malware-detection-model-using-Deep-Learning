import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib

data = pd.read_csv("C:\\Users\\ASUS\\Desktop\\Real-time malware detection system\\dataset.csv")


numeric_columns = data.select_dtypes(include=[np.number]).columns
X = data[numeric_columns].values  
y = data['legitimate'].values 


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


joblib.dump(scaler, 'scaler.joblib')


model = Sequential([
    Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.4),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split=0.2)
model.save('malware_detection_model.h5')

def detect_malware(features):
    """
    Preprocesses and predicts whether the input features belong to malware.

    Parameters:
    - features (array-like): Raw feature values for a single file.

    Returns:
    - str: 'Malware' or 'Benign' based on model prediction.
    """
   
    global loaded_model, loaded_scaler

    if 'loaded_model' not in globals():
        loaded_model = load_model('malware_detection_model.h5')
    if 'loaded_scaler' not in globals():
        loaded_scaler = joblib.load('scaler.joblib')

    
    processed_features = loaded_scaler.transform([features])  

    
    prediction = (loaded_model.predict(processed_features) > 0.5).astype("int32")[0][0]

    return 'Malware' if prediction == 1 else 'Benign'



new_file_features = np.random.rand(X_train.shape[1])  
result = detect_malware(new_file_features)
print(f"Detection Result: {result}")
