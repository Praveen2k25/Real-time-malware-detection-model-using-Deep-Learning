import os
import numpy as np
import pandas as pd
import joblib
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler


model = load_model('malware_detection_model.h5')
scaler = joblib.load('scaler.joblib')


scan_folder = "C:\\Users\\ASUS\\Desktop\\luds"


def detect_malware(features):

    processed_features = scaler.transform([features])  
    prediction = (model.predict(processed_features) > 0.5).astype("int32")[0][0]
    return 'Malware' if prediction == 1 else 'Benign'

class NewFileHandler(FileSystemEventHandler):
    def on_created(self, event):

        if not event.is_directory:
            file_path = event.src_path
            print(f"New file detected: {file_path}")

   
            try:
                data = pd.read_csv(file_path)
                numeric_columns = data.select_dtypes(include=[np.number]).columns
                features = data[numeric_columns].values.flatten()

                
                if features.shape[0] == model.input_shape[1]:
                    result = detect_malware(features)
                    print(f"Detection Result for {file_path}: {result}")

                    if result == 'Malware':
                        print(f"Malware detected in {file_path}! Stopping scan.")
                        observer.stop()  
                else:
                    print(f"File {file_path} has an incorrect feature shape.")

            except Exception as e:
                print(f"Error processing file {file_path}: {e}")

observer = Observer()
event_handler = NewFileHandler()
observer.schedule(event_handler, scan_folder, recursive=False)

print(f"Starting real-time malware scan in folder: {scan_folder}")
observer.start()

try:
    while observer.is_alive():
        time.sleep(1) 

except KeyboardInterrupt:
    observer.stop()

observer.join()
